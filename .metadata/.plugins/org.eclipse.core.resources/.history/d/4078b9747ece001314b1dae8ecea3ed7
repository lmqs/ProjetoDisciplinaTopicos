package br.com.projetoquestoesconcurso;

import java.io.IOException;
import java.util.ArrayList;

import android.app.Activity;
import android.database.SQLException;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.TextView;
import br.com.projetoquestoesconcurso.List.QuestoesList;
import br.com.projetoquestoesconcurso.conexao.Conexao;
import br.com.projetoquestoesconcurso.model.Questao;

public class GeracaoProvas extends Activity {

	private Questao questaoCorrente;
	private QuestoesList currentGame = new QuestoesList();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_geracao_provas);
		Log.i("GERAçÃOPROVA", "Antes de pegar a questão - ");

		ArrayList<Questao> questions = (ArrayList<Questao>) getIntent()
				.getExtras().getSerializable("objeto");

		// Recuperando as alternativas de cada questão
		recuperaAlternativa(questions);
		currentGame.setQuestoes(questions);

		questaoCorrente = currentGame.getNextQuestion();
		
		
		Log.i("GERAçÃOPROVA",
				"CHEGOU NA CLASSE GERAÇÂO DE PROVA - 2 tela, Passou do recupera a LISTA");
		// Button nextBtn = (Button) findViewById(R.id.btnProx);
		// nextBtn.setOnClickListener(this);
		setQuestions();
	}

	private void recuperaAlternativa(ArrayList<Questao> questions) {

		Conexao myDbHelper = new Conexao(this);
		try {
			myDbHelper.createDataBase();
		} catch (IOException ioe) {
			throw new Error("Unable to create database");
		}
		try {
			myDbHelper.openDataBase();
		} catch (SQLException sqle) {
			throw sqle;
		}
		for (int i = 0; i < questions.size(); i++) {
			questions.get(i).setAlternativas(
					myDbHelper.getAlternativaPorQuestao(questions.get(i)
							.getIdt_questao()));
		}
		myDbHelper.close();

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.geracao_provas, menu);
		return true;
	}

	private void setQuestions() {
		// set the question text from current question
		String question = questaoCorrente.getDsc_questao();
		TextView qText = (TextView) findViewById(R.id.txtQuestao);
		qText.setText(question);

		Log.i("Trouxe Alternativas?", "VEREMOMS:   "
				+ questaoCorrente.getAlternativas().get(0).getDsc_alternativa());

		// Setando as Alternativas

		TextView opcao1 = (TextView) findViewById(R.id.resp1);
		opcao1.setText(questaoCorrente.getAlternativas().get(0)
				.getDsc_alternativa());

		TextView opcao2 = (TextView) findViewById(R.id.resp2);
		opcao2.setText(questaoCorrente.getAlternativas().get(1)
				.getDsc_alternativa());

		TextView opcao3 = (TextView) findViewById(R.id.resp3);
		opcao3.setText(questaoCorrente.getAlternativas().get(2)
				.getDsc_alternativa());

		TextView opcao4 = (TextView) findViewById(R.id.resp4);
		opcao4.setText(questaoCorrente.getAlternativas().get(3)
				.getDsc_alternativa());

	}

	public void geraQuestao(View view) {

	}
	
	public void validaQuestao(View view){
		EditText nome = (EditText) findViewById(R.id.nome);
        EditText endereco = (EditText) findViewById(R.id.end);

        r.setNome(nome.getText().toString());
        r.setEndereco(endereco.getText().toString());

        RadioGroup tipos = (RadioGroup) findViewById(R.id.radioGroup1);

        switch (tipos.getCheckedRadioButtonId()) {
        case R.id.resp1:
            r.setTipo("rodizio");
            break;
        case R.id.resp2:
            r.setTipo("fast_food");
            break;
        case R.id.resp3:
            r.setTipo("a_domicilio");
            break;
        case R.id.resp4:
            r.setTipo("a_domicilio");
            break;
        }

    }

	}

}
